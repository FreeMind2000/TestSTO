//---------------------------------------------------------------------------
// < TestSTO >
//---------------------------------------------------------------------------
// Программа для визуализации уравнений движений
// классической и релятивистской физики, иллюстрирующая
// противоречие в Специальной Теории Относительности А.Эйнштейна
//---------------------------------------------------------------------------
// Автор: Александр Меркелов (free_mind2@list.ru)
// Форум программы: http://www.free---mind.mirbb.net/t7-topic
//---------------------------------------------------------------------------
// Версия: 1.00
// Дата: 18 декабря - 21 декабря 2012г
// - релиз
//---------------------------------------------------------------------------
// Версия: 1.01
// Дата: 22 декабря 2012г
// - fix: в релизе без борландских dll прога не запускалась
// - добавлено окно настроек в котором можно менять параметры
//   - скорость поезда
//	 - delta t (шаг времени в ИСО К)
//	 - t конца эксаеримента (в ИСО К)
// - для большей наглядности изменена скорость поезда поумолчанию 10->20 (2/3 C=30)
// - зона чувствительности датчика повышена с 0.001 до визуальной ширины его фрейма
// - Ура товарищи! :)
//---------------------------------------------------------------------------
// Версия: 1.02
// Дата: 23 декабря 2012г
// - добавлен флаг для фиксации движущейся ИСО на одном месте
// - добавлено стартовое окно с описанием парадокса
// - добавлены окна с хелпом для экспериментов
// - создан форум для обсуждения программы
//---------------------------------------------------------------------------


#ifndef Unit_frmMainH
#define Unit_frmMainH
//---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
#include <ExtCtrls.hpp>
#include <Menus.hpp>

#include "MList.h"

//---------------------------------------------------------------------------
class MIso;
//---------------------------------------------------------------------------
const double g_light_c = 30;	// глобальная скорость света C
//---------------------------------------------------------------------------
// Класс для Мат объект
//---------------------------------------------------------------------------
class MMatObject
{
public:
	// цвет объекта
	TColor color;

	// высота на которой расположен объект
	int visual_dy;

	// размеры прямоугольника вокруг объекта
	int visual_rx, visual_ry;

	// имя
	AnsiString name;

	// позиция заголовка (сверху/снизу от объекта)
	bool caption_up;

	// цвет заголовка
	TColor caption_color;

	// в какой исо находится
	MIso* iso;

public:
	//---------------------------------------------------------------------------
	// Конструктор
	//---------------------------------------------------------------------------
	MMatObject
	(
	) : caption_color((TColor)RGB(0,255,100))
	{}

	//---------------------------------------------------------------------------
	// Создаем новую копию объекта 
	//---------------------------------------------------------------------------
	virtual MMatObject* __fastcall Clone
	(
	){ return NULL; };

	//---------------------------------------------------------------------------
	// Запускаем активацию объекта
	//---------------------------------------------------------------------------
	virtual void __fastcall Run
	(
	){};

	//---------------------------------------------------------------------------
	// Визуализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Show
	(
	){};

	//---------------------------------------------------------------------------
	// двигаем объекты в неподвижной ИСО
	// t_move_abs: x = x0 + v * t
	//---------------------------------------------------------------------------
	virtual void __fastcall Move
	(
		const int in_t_move,		// тип движения
		const double in_new_time	// новое t для расчета
	){};

	//---------------------------------------------------------------------------
	// Делаем преобразование объектов в движущуюся ИСО
	//---------------------------------------------------------------------------
	virtual void __fastcall Transform
	(
		const int in_t_transform,	// тип трансформации
		const double in_move_v,		// скрость движения новой ИСО относительно текущей
        MMatObject& out_obj			// объект в который сохраняется результат преобразования
	)
	{}
};

//---------------------------------------------------------------------------
// Класс для Материальной точки
//---------------------------------------------------------------------------
class MMatPoint : public MMatObject
{
public:
	// Начальная координата X
	double x0;

	// Текущая координата X
	double x;

	// Скорость
	double v;

	// Время
	double t;

public:
	//---------------------------------------------------------------------------
	// Создаем новую копию объекта - [Not use]
	//---------------------------------------------------------------------------
	virtual MMatObject* __fastcall Clone
	(
	)
	{
		MMatPoint* new_p = new MMatPoint;
		new_p->x0 = x0;
		new_p->x = x;
		new_p->v = v;
		new_p->t = t;
		return new_p;
	}

	//---------------------------------------------------------------------------
	// двигаем объекты в неподвижной ИСО
	// t_move_abs: x = x0 + v * t
	//---------------------------------------------------------------------------
	virtual void __fastcall Move
	(
		const int in_t_move,		// тип движения
		const double in_new_time	// новое t для расчета
	);

	//---------------------------------------------------------------------------
	// формула движения abs - расчитываем x по новому t
	// t_move_abs: x = x0 + v * t
	//---------------------------------------------------------------------------
	void __fastcall MoveAbsFormula
	(
		const double in_new_time	// новое t для расчета
	);

	//---------------------------------------------------------------------------
	// Делаем преобразование объектов в движущуюся ИСО
	//---------------------------------------------------------------------------
	virtual void __fastcall Transform
	(
		const int in_t_transform,	// тип трансформации
		const double in_move_v,		// скрость движения новой ИСО относительно текущей
		MMatObject& out_obj			// объект в который сохраняется результат преобразования
	);

	//---------------------------------------------------------------------------
	// Делаем преобразование объектов в движущуюся ИСО
	//---------------------------------------------------------------------------
	void __fastcall TransformStoFormula
	(
		const double in_move_v,		// скрость движения новой ИСО относительно текущей
		MMatPoint& out_obj			// объект в который сохраняется результат преобразования
	);

	//---------------------------------------------------------------------------
	// Визуализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Show
	(
	);
};

//---------------------------------------------------------------------------
// Класс для Материальной линии
// 2е соединенные точки 
//---------------------------------------------------------------------------
class MMatLine : public MMatObject
{
public:
	MMatPoint first_point;
	MMatPoint second_point;
};

//---------------------------------------------------------------------------
// Класс для датчика
//---------------------------------------------------------------------------
class MSensorBase : public MMatPoint
{
public:
//	// точка в которой расположен датчик
//	MMatPoint base_point;
};


//---------------------------------------------------------------------------
// Класс для датчика одновременного касания
//---------------------------------------------------------------------------
// Логика работы:
// - Датчик срабатывает на объекты определенного типа
// (тип определяется по 1й букве в имени объекта "F" - фотон...)
// - Начально состояние датчика = UNDEFINED
// - Если в текущий момент времени в точке в которой находится датчик
// (относительно ИСО с которой связан датчик) одновременно находятся 2 объекта
// (т.е. имеют координаты == координате точки в которой находится датчик)
// то - датчик срабатывает-включается (состояние = ON)
// - Если в текущий момент времени в точке в которой находится датчик
// находится только 1 объект датчик срабатывает-вЫключается (состояние = OFF)
// - Если в текущий момент времени в точке в которой находится датчик
// находится 0 объектов состояние датчика не меняется (состояние = старое_состояние)
//---------------------------------------------------------------------------
class MSensor2 : public MSensorBase
{
public:
	// Тип датчика определяется по 1й букве в имени объекта "F" - фотон...
	AnsiString type;

	// Текущее состояние датчика
	static const int t_sost_undefined = 0;
	static const int t_sost_on = 1;
	static const int t_sost_off = 2;
	int sost;

	//---------------------------------------------------------------------------
	// Запускаем активацию объекта
	//---------------------------------------------------------------------------
	virtual void __fastcall Run
	(
	);

	//---------------------------------------------------------------------------
	// Визуализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Show
	(
	);	
};

//---------------------------------------------------------------------------
// Класс для ИСО (инерциальной системы отсчёта)
//---------------------------------------------------------------------------
class MIso : public MMatObject
{
public:
	// Список объектов связанных с ИСО
	MList<MMatObject> obj_list;

	// Смещение для отрисовки (только у ИСО, остальные объекты привязываются к ИСО)
	int visual_dx;
	// длины линий для осей
	int hor_line_len;
	int ver_line_len;

	// Начало координат
	MMatPoint coord_begin_point;

	// канва отдельная
	TPaintBox* paint;

	// канва объединенная
	TPaintBox* paint2;

	// тип движения
	static const int t_move_abs = 1;

	// тип преобразования
	static const int t_transform_sto = 1;

public:
	//---------------------------------------------------------------------------
	// Двигаем объекты в неподвижной ИСО
	//---------------------------------------------------------------------------
	void __fastcall MoveObjects
	(
		const int in_t_move,		// тип движения
		const double in_new_time	// новое t для расчета
	);

	//---------------------------------------------------------------------------
	// Делаем преобразование объектов в движущуюся ИСО
	//---------------------------------------------------------------------------
	void __fastcall TransformObjects
	(
		const int in_t_transform,	// тип трансформации
		MIso* inout_iso          	// ИСО в которую сохраняется результат трансформации
	);

	//---------------------------------------------------------------------------
	// Активируем объекты (проверяем срабатывание датчиков)
	//---------------------------------------------------------------------------
	void __fastcall RunObjects
	(
	);

public:
	//---------------------------------------------------------------------------
	// Визуализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Show
	(
	);
};


//---------------------------------------------------------------------------
// Класс для эксперимента
//---------------------------------------------------------------------------
class MExperimentBase
{
public:
	// Покоящаяся ИСО
	MIso* abs_iso;

	// Движущаяся ИСО (создается динамически - на основе покоящейся ИСО
	// по формулам Лоренцева преобразования координат)
	MIso* move_iso;

	// Время старта/конца эксперимента
	double time_start;
	double time_end;
	// шаг приращения времени 
	double time_step;
	// текущее время
	double time_cur;

	// форма с описанием
	TForm* m_frmHelp;

public:
	//---------------------------------------------------------------------------
	// Конструктор
	//---------------------------------------------------------------------------
	MExperimentBase
	(
	) : m_frmHelp(NULL)
	{}


	//---------------------------------------------------------------------------
	// Деструктор
	//---------------------------------------------------------------------------
	~MExperimentBase()
	{
		Destroy();
	}


	//---------------------------------------------------------------------------
	// ДеИнициализация
	//---------------------------------------------------------------------------
	void __fastcall Destroy()
	{
		if (abs_iso)
		{
			delete abs_iso;
			abs_iso = NULL;
		}
		if (move_iso)
		{
			delete move_iso;
			move_iso = NULL;
		}
	}

	//---------------------------------------------------------------------------
	// Инициализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Init
	(
	) = 0;

	//---------------------------------------------------------------------------
	// Сброс состояния датчиков
	//---------------------------------------------------------------------------
	virtual void __fastcall Reset
	(
	) = 0;

	//---------------------------------------------------------------------------
	// Запускаем с учетом параметров на форме
	//---------------------------------------------------------------------------
	virtual void __fastcall Run
	(
	);

	//---------------------------------------------------------------------------
	// Визуализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Show
	(
	);
};

//---------------------------------------------------------------------------
// Класс для эксперимента EasyMove
//---------------------------------------------------------------------------
class MExperimentEasyMove : public MExperimentBase
{
public:
	//---------------------------------------------------------------------------
	// Инициализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Init
	(
	);

	//---------------------------------------------------------------------------
	// Сброс состояния датчиков
	//---------------------------------------------------------------------------
	virtual void __fastcall Reset
	(
	);
};

//---------------------------------------------------------------------------
// Класс для эксперимента LastArgumentOfKing
//---------------------------------------------------------------------------
class MExperimentLastArgumentOfKing : public MExperimentBase
{
public:
	//---------------------------------------------------------------------------
	// Инициализация
	//---------------------------------------------------------------------------
	virtual void __fastcall Init
	(
	);

	//---------------------------------------------------------------------------
	// Сброс состояния датчиков
	//---------------------------------------------------------------------------
	virtual void __fastcall Reset
	(
	);
};

//---------------------------------------------------------------------------
class TfrmMain : public TForm
{
__published:	// IDE-managed Components
	TPanel *Panel_1;
	TPanel *Panel_2;
	TPaintBox *m_PaintBox_AbsSTO;
	TPanel *Panel_3;
	TPaintBox *m_PaintBox_MoveSTO;
	TPanel *Panel_4;
	TLabel *m_Label_1;
	TComboBox *m_ComboBox_Experiment;
	TButton *Button_StartExperiment;
	TCheckBox *m_CheckBox_Experiment_FixMoveIso;
	TButton *Button_About;
	TPanel *Panel1;
	TMemo *m_Memo_Dbg;
	TButton *Button_ExpSettings;
	TButton *Button_ExpHelp;
	void __fastcall FormCreate(TObject *Sender);
	void __fastcall m_ComboBox_ExperimentChange(TObject *Sender);
	void __fastcall FormDestroy(TObject *Sender);
	void __fastcall m_PaintBox_AbsSTOPaint(TObject *Sender);
	void __fastcall Button_StartExperimentClick(TObject *Sender);
	void __fastcall Button_AboutClick(TObject *Sender);
	void __fastcall m_CheckBox_Experiment_FixMoveIsoClick(TObject *Sender);
	void __fastcall Button_ExpSettingsClick(TObject *Sender);
	void __fastcall FormHide(TObject *Sender);
	void __fastcall Button_ExpHelpClick(TObject *Sender);
	void __fastcall FormShow(TObject *Sender);
	void __fastcall FormActivate(TObject *Sender);
private:	// User declarations
public:		// User declarations
	__fastcall TfrmMain(TComponent* Owner);

public:
	MExperimentBase* m_CurExperiment;
};
//---------------------------------------------------------------------------
extern PACKAGE TfrmMain *frmMain;
//---------------------------------------------------------------------------
#endif
